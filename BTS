class Node: 
    def __init__(self,key): 
        self.left = None
        self.right = None
        self.val = key 
  

def insert(root,node): 
    if root is None: 
        root = node
    else: 
        if root.val < node.val: 
            if root.right is None: 
                root.right = node 
            else: 
                insert(root.right, node) 
        else: 
            if root.left is None: 
                root.left = node 
            else: 
                insert(root.left, node) 
  

def inorder(root): 
    if root: 
        inorder(root.left) 
        print(root.val) 
        inorder(root.right) 
  
  

root=Node(60)
insert(root,Node(10))
insert(root,Node(20)) 
insert(root,Node(30)) 
insert(root,Node(40)) 
insert(root,Node(50)) 
insert(root,Node(80)) 
  

inorder(root) 


# 2
#Search a node in BTS
class BST:
    
    #Function to search a node in BST.
    def search(self, node, x):
        #code here
        if node==None:
            return False
        if node.data==x:
            return True
        elif node.data>x:
        
            return self.search(node.left,x)
           
        else:
        
            return self.search(node.right,x)
            
            

